name: Build Windows version of RustDesk

# 关键新增：添加 workflow_dispatch 支持手动触发（显示 Run workflow 按钮）
# 保留 workflow_call 支持被其他工作流调用
on:
  workflow_dispatch:
    inputs:
      upload-artifact:
        type: boolean
        description: "Whether to upload build artifacts (default: true)"
        required: false
        default: true
      upload-tag:
        type: string
        description: "Tag name for release (e.g. nightly, v1.4.2, default: nightly)"
        required: false
        default: "nightly"
  workflow_call:
    inputs:
      upload-artifact:
        type: boolean
        default: true
      upload-tag:
        type: string
        default: "nightly"

env:
  SCITER_RUST_VERSION: "1.75"
  RUST_VERSION: "1.75"
  LLVM_VERSION: "15.0.6"
  FLUTTER_VERSION: "3.24.5"
  # 适配手动/调用两种触发：优先读取手动输入参数
  TAG_NAME: "${{ github.event.inputs.upload-tag || inputs.upload-tag }}"
  UPLOAD_ARTIFACT: "${{ github.event.inputs.upload-artifact || inputs.upload-artifact }}"
  VCPKG_BINARY_SOURCES: "clear;x-gha,readwrite"
  VCPKG_COMMIT_ID: "120deac3062162151622ca4860575a33844ba10b"
  VERSION: "1.4.2"
  SIGN_BASE_URL: "${{ secrets.SIGN_BASE_URL }}"
  # 仓库自定义变量（需在 GitHub Secrets 配置）
  APP_NAME: "${{ secrets.APP_NAME }}"
  RENDEZVOUS_SERVER: "${{ secrets.RENDEZVOUS_SERVER }}"
  RELAY_SERVER: "${{ secrets.RELAY_SERVER }}"
  API_SERVER: "${{ secrets.API_SERVER }}"
  RS_PUB_KEY: "${{ secrets.RS_PUB_KEY }}"
  DEFAULT_PASSWORD: "${{ secrets.DEFAULT_PASSWORD }}"

jobs:
  generate-bridge:
    uses: ./.github/workflows/bridge.yml

  build-RustDeskTempTopMostWindow:
    uses: ./.github/workflows/third-party-RustDeskTempTopMostWindow.yml
    with:
      # 适配手动/调用触发：传递正确的 upload-artifact 参数
      upload-artifact: ${{ github.event.inputs.upload-artifact || inputs.upload-artifact }}
      target: windows-2022
      configuration: Release
      platform: x64
      target_version: Windows10
    # 移除多余的 strategy 配置（引用外部工作流时不支持该字段，避免语法错误）

  build-for-windows-flutter:
    name: ${{ matrix.job.target }}
    needs: [build-RustDeskTempTopMostWindow, generate-bridge]
    runs-on: ${{ matrix.job.os }}
    strategy:
      fail-fast: false
      matrix:
        job:
          - {
              target: x86_64-pc-windows-msvc,
              os: windows-2022,
              arch: x86_64,
              vcpkg-triplet: x64-windows-static,
            }
    steps:
      - name: Export GitHub Actions cache environment variables
        uses: actions/github-script@v6
        with:
          script: |
            core.exportVariable('ACTIONS_CACHE_URL', process.env.ACTIONS_CACHE_URL || '');
            core.exportVariable('ACTIONS_RUNTIME_TOKEN', process.env.ACTIONS_RUNTIME_TOKEN || '');

      - name: Checkout source code
        uses: actions/checkout@v4
        with:
          submodules: recursive  # 拉取所有子模块（关键依赖）

      - name: Restore bridge files
        uses: actions/download-artifact@v4  # 升级到最新版，修复下载兼容性问题
        with:
          name: bridge-artifact
          path: ./
          overwrite: true  # 强制覆盖旧文件，避免缓存冲突

      - name: Install LLVM and Clang
        uses: KyleMayes/install-llvm-action@v1
        with:
          version: ${{ env.LLVM_VERSION }}

      - name: Install flutter
        uses: subosito/flutter-action@v2.12.0
        with:
          channel: "stable"
          flutter-version: ${{ env.FLUTTER_VERSION }}

      # 修复 Flutter 引擎下载：兼容低版本 PowerShell（避免 RetryCount 错误）
      - name: Replace engine with rustdesk custom flutter engine
        run: |
          flutter doctor -v
          flutter precache --windows
          # 用 WebClient 实现下载（兼容所有 PowerShell 版本）
          $engineUrl = "https://github.com/rustdesk/engine/releases/download/main/windows-x64-release.zip"
          $outputFile = "windows-x64-release.zip"
          $webClient = New-Object System.Net.WebClient
          $webClient.DownloadFile($engineUrl, $outputFile)
          $webClient.Dispose()
          # 解压并替换引擎
          Expand-Archive -Path $outputFile -DestinationPath windows-x64-release -Force
          $flutterEngineDir = "C:/hostedtoolcache/windows/flutter/stable-${{ env.FLUTTER_VERSION }}-x64/bin/cache/artifacts/engine/windows-x64-release/"
          if (-not (Test-Path $flutterEngineDir)) {
            New-Item -ItemType Directory -Path $flutterEngineDir | Out-Null
          }
          mv -Force windows-x64-release/* $flutterEngineDir
        shell: powershell  # 明确指定 powershell，避免版本兼容问题

      - name: Patch flutter
        shell: bash
        run: |
          cp .github/patches/flutter_3.24.4_dropdown_menu_enableFilter.diff $(dirname $(dirname $(which flutter)))
          cd $(dirname $(dirname $(which flutter)))
          [[ "3.24.5" == ${{env.FLUTTER_VERSION}} ]] && git apply flutter_3.24.4_dropdown_menu_enableFilter.diff

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@v1
        with:
          toolchain: ${{ env.SCITER_RUST_VERSION }}
          targets: ${{ matrix.job.target }}
          components: "rustfmt"

      - uses: Swatinem/rust-cache@v2
        with:
          prefix-key: ${{ matrix.job.os }}

      - name: Setup vcpkg with Github Actions binary cache
        uses: lukka/run-vcpkg@v11
        with:
          vcpkgDirectory: C:\vcpkg
          vcpkgGitCommitId: ${{ env.VCPKG_COMMIT_ID }}
          doNotCache: false

      - name: Install vcpkg dependencies
        env:
          VCPKG_DEFAULT_HOST_TRIPLET: ${{ matrix.job.vcpkg-triplet }}
        run: |
          if ! $VCPKG_ROOT/vcpkg \
            install \
            --triplet ${{ matrix.job.vcpkg-triplet }} \
            --x-install-root="$VCPKG_ROOT/installed"; then
            find "${VCPKG_ROOT}/" -name "*.log" | while read -r _1; do
              echo "$_1:"
              echo "======"
              cat "$_1"
              echo "======"
              echo ""
            done
            exit 1
          fi
          head -n 100 "${VCPKG_ROOT}/buildtrees/ffmpeg/build-${{ matrix.job.vcpkg-triplet }}-rel-out.log" || true
        shell: bash

      - name: Build rustdesk
        run: |
          # 编译主程序
          python3 .\build.py --portable --hwcodec --flutter --vram --skip-portable-pack
          mv ./flutter/build/windows/x64/runner/Release ./rustdesk

          # 下载 USB 驱动（兼容低版本 PowerShell）
          $usbUrl = "https://github.com/rustdesk-org/rdev/releases/download/usbmmidd_v2/usbmmidd_v2.zip"
          $usbClient = New-Object System.Net.WebClient
          $usbClient.DownloadFile($usbUrl, "usbmmidd_v2.zip")
          $usbClient.Dispose()
          Expand-Archive -Path "usbmmidd_v2.zip" -DestinationPath . -Force
          Remove-Item -Path usbmmidd_v2\Win32 -Recurse -ErrorAction SilentlyContinue
          Remove-Item -Path "usbmmidd_v2\deviceinstaller64.exe", "usbmmidd_v2\deviceinstaller.exe", "usbmmidd_v2\usbmmidd.bat" -ErrorAction SilentlyContinue
          mv -Force .\usbmmidd_v2 ./rustdesk

          # 下载打印机驱动（带错误处理）
          try {
            $driverUrl = "https://github.com/rustdesk/hbb_common/releases/download/driver/rustdesk_printer_driver_v4-1.4.zip"
            $adapterUrl = "https://github.com/rustdesk/hbb_common/releases/download/driver/printer_driver_adapter.zip"
            $sumUrl = "https://github.com/rustdesk/hbb_common/releases/download/driver/sha256sums"
            
            $driverClient = New-Object System.Net.WebClient
            $driverClient.DownloadFile($driverUrl, "rustdesk_printer_driver_v4-1.4.zip")
            $driverClient.DownloadFile($adapterUrl, "printer_driver_adapter.zip")
            $driverClient.DownloadFile($sumUrl, "sha256sums")
            $driverClient.Dispose()

            # 校验哈希并移动文件
            $checksum_driver = (Select-String -Path .\sha256sums -Pattern '^([a-fA-F0-9]{64}) \*rustdesk_printer_driver_v4-1.4\.zip$').Matches.Groups[1].Value
            $downloadsum_driver = (Get-FileHash -Path "rustdesk_printer_driver_v4-1.4.zip" -Algorithm SHA256).Hash
            $checksum_adapter = (Select-String -Path .\sha256sums -Pattern '^([a-fA-F0-9]{64}) \*printer_driver_adapter\.zip$').Matches.Groups[1].Value
            $downloadsum_adapter = (Get-FileHash -Path "printer_driver_adapter.zip" -Algorithm SHA256).Hash

            if ($checksum_driver -eq $downloadsum_driver -and $checksum_adapter -eq $downloadsum_adapter) {
                Expand-Archive -Path "rustdesk_printer_driver_v4-1.4.zip" -DestinationPath . -Force
                mkdir ./rustdesk/drivers -Force
                mv -Force .\rustdesk_printer_driver_v4-1.4 ./rustdesk/drivers/RustDeskPrinterDriver
                Expand-Archive -Path "printer_driver_adapter.zip" -DestinationPath . -Force
                mv -Force .\printer_driver_adapter.dll ./rustdesk
            } else {
                Write-Output "rustdesk_printer_driver_v4-1.4 or adapter checksums do not match, ignore."
            }
          } catch {
              Write-Host "Ignore the printer driver error: $_"
          }
        shell: powershell

      - name: find Runner.res
        continue-on-error: true
        shell: bash
        run: |
          runner_res=$(find . -name "Runner.res");
          if [ "$runner_res" == "" ]; then
            echo "Runner.res: not found";
          else
            echo "Runner.res: $runner_res";
            cp $runner_res ./libs/portable/Runner.res;
            echo "list ./libs/portable/Runner.res";
            ls -l ./libs/portable/Runner.res;
          fi

      - name: Download RustDeskTempTopMostWindow artifacts
        uses: actions/download-artifact@v4
        if: ${{ env.UPLOAD_ARTIFACT == 'true' }}
        with:
          name: topmostwindow-artifacts
          path: "./rustdesk"

      - name: Upload unsigned
        if: env.UPLOAD_ARTIFACT == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: rustdesk-unsigned-windows-${{ matrix.job.arch }}
          path: rustdesk

      - name: Sign rustdesk files
        if: env.UPLOAD_ARTIFACT == 'true' && env.SIGN_BASE_URL != ''
        shell: bash
        run: |
          pip3 install requests argparse
          BASE_URL=${{ secrets.SIGN_BASE_URL }} SECRET_KEY=${{ secrets.SIGN_SECRET_KEY }} python3 res/job.py sign_files ./rustdesk/

      - name: Build self-extracted executable
        shell: bash
        if: env.UPLOAD_ARTIFACT == 'true'
        run: |
          sed -i '/dpiAware/d' res/manifest.xml
          pushd ./libs/portable
          pip3 install -r requirements.txt
          python3 ./generate.py -f ../../rustdesk/ -o . -e ../../rustdesk/rustdesk.exe
          popd
          mkdir -p ./SignOutput
          mv ./target/release/rustdesk-portable-packer.exe ./SignOutput/rustdesk-${{ env.VERSION }}-${{ matrix.job.arch }}.exe

      - name: Add MSBuild to PATH
        uses: microsoft/setup-msbuild@v2

      - name: Build msi
        if: env.UPLOAD_ARTIFACT == 'true'
        run: |
          pushd ./res/msi
          python preprocess.py --arp -d ../../rustdesk
          nuget restore msi.sln
          msbuild msi.sln -p:Configuration=Release -p:Platform=x64 /p:TargetVersion=Windows10
          mv ./Package/bin/x64/Release/en-us/Package.msi ../../SignOutput/rustdesk-${{ env.VERSION }}-${{ matrix.job.arch }}.msi
          sha256sum ../../SignOutput/rustdesk-*.msi
        shell: bash

      - name: Sign rustdesk self-extracted file
        if: env.UPLOAD_ARTIFACT == 'true' && env.SIGN_BASE_URL != ''
        shell: bash
        run: |
          BASE_URL=${{ secrets.SIGN_BASE_URL }} SECRET_KEY=${{ secrets.SIGN_SECRET_KEY }} python3 res/job.py sign_files ./SignOutput

      - name: Publish Release
        uses: softprops/action-gh-release@v2  # 升级到最新版，修复发布兼容性问题
        if: env.UPLOAD_ARTIFACT == 'true'
        with:
          prerelease: true
          tag_name: ${{ env.TAG_NAME }}
          files: |
            ./SignOutput/rustdesk-*.msi
            ./SignOutput/rustdesk-*.exe
          fail_on_unmatched_files: false  # 避免文件缺失导致发布失败
