name: Build Windows Version of RustDesk (GitHub Compile)

# 支持手动触发和工作流调用（修复参数类型问题）
on:
  workflow_dispatch:
    inputs:
      upload-artifact:
        type: boolean
        description: "Whether to upload build artifacts (default: true)"
        required: false
        default: true
      upload-tag:
        type: string
        description: "Tag for GitHub Release (e.g. nightly, v1.4.2, default: nightly)"
        required: false
        default: "nightly"
  workflow_call:
    inputs:
      upload-artifact:
        type: boolean
        default: true
      upload-tag:
        type: string
        default: "nightly"

# GitHub 编译专用环境变量
env:
  SCITER_RUST_VERSION: "1.75.0"
  LLVM_VERSION: "15.0.6"
  FLUTTER_VERSION: "3.24.5"
  VCPKG_COMMIT_ID: "120deac3062162151622ca4860575a33844ba10b"
  VERSION: "1.4.2"
  # 修复布尔值解析问题：通过表达式明确转换为字符串
  TAG_NAME: "${{ github.event.inputs.upload-tag || inputs.upload-tag }}"
  UPLOAD_ARTIFACT: "${{ (github.event.inputs.upload-artifact == true) || (inputs.upload-artifact == true) }}"
  # 仓库密钥（需在 GitHub Secrets 配置）
  SIGN_BASE_URL: "${{ secrets.SIGN_BASE_URL }}"
  APP_NAME: "${{ secrets.APP_NAME }}"
  RENDEZVOUS_SERVER: "${{ secrets.RENDEZVOUS_SERVER }}"
  RELAY_SERVER: "${{ secrets.RELAY_SERVER }}"
  API_SERVER: "${{ secrets.API_SERVER }}"
  RS_PUB_KEY: "${{ secrets.RS_PUB_KEY }}"
  DEFAULT_PASSWORD: "${{ secrets.DEFAULT_PASSWORD }}"

jobs:
  # 前置任务1：生成 Rust-Flutter 桥接代码
  generate-bridge:
    uses: ./.github/workflows/bridge.yml

  # 前置任务2：编译顶层窗口组件（修复参数传递类型）
  build-topmost-window:
    uses: ./.github/workflows/third-party-RustDeskTempTopMostWindow.yml
    with:
      # 明确传递布尔值，避免 YAML 解析错误
      upload-artifact: ${{ (github.event.inputs.upload-artifact == true) || (inputs.upload-artifact == true) }}
      target: windows-2022
      configuration: Release
      platform: x64
      target_version: Windows10

  # 核心编译任务（Windows x64 Flutter 版本）
  build-windows-flutter:
    name: Windows x64 (Flutter)
    needs: [generate-bridge, build-topmost-window]
    runs-on: windows-2022
    steps:
      # 清理磁盘空间（GitHub Runner 空间有限）
      - name: Free Disk Space
        run: |
          Remove-Item -Path "C:\Program Files\Docker" -Recurse -Force -ErrorAction SilentlyContinue
          Remove-Item -Path "C:\ProgramData\Package Cache" -Recurse -Force -ErrorAction SilentlyContinue
          Remove-Item -Path "C:\Windows\Temp\*" -Recurse -Force -ErrorAction SilentlyContinue

      # 拉取代码（含子模块）
      - name: Checkout Source Code
        uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0

      # 恢复桥接文件
      - name: Restore Bridge Files
        uses: actions/download-artifact@v4
        with:
          name: bridge-artifact
          path: ./
          overwrite: true

      # 安装 LLVM
      - name: Install LLVM & Clang
        uses: KyleMayes/install-llvm-action@v1
        with:
          version: ${{ env.LLVM_VERSION }}
          cache: true

      # 安装 Flutter（指定兼容版本）
      - name: Install Flutter
        uses: subosito/flutter-action@v2.12.0
        with:
          channel: "stable"
          flutter-version: ${{ env.FLUTTER_VERSION }}
          cache: true

      # 替换 RustDesk 自定义 Flutter 引擎
      - name: Replace Flutter Engine
        run: |
          flutter doctor -v
          flutter precache --windows
          $engineUrl = "https://ghproxy.com/https://github.com/rustdesk/engine/releases/download/main/windows-x64-release.zip"
          Invoke-WebRequest -Uri $engineUrl -OutFile windows-x64-release.zip -RetryCount 3 -RetryIntervalSec 5
          Expand-Archive -Path windows-x64-release.zip -DestinationPath windows-x64-release -Force
          $engineDir = "C:/hostedtoolcache/windows/flutter/stable-${{ env.FLUTTER_VERSION }}-x64/bin/cache/artifacts/engine/windows-x64-release/"
          if (-not (Test-Path $engineDir)) { New-Item -ItemType Directory -Path $engineDir | Out-Null }
          mv -Force windows-x64-release/* $engineDir
        shell: pwsh

      # 应用 Flutter 补丁（版本匹配时执行）
      - name: Patch Flutter (DropdownMenu Fix)
        shell: bash
        run: |
          if [[ "${{ env.FLUTTER_VERSION }}" == "3.24.5" ]]; then
            patchFile=".github/patches/flutter_3.24.4_dropdown_menu_enableFilter.diff"
            if [ -f "$patchFile" ]; then
              flutterRoot=$(dirname $(dirname $(which flutter)))
              cp "$patchFile" "$flutterRoot/"
              cd "$flutterRoot" && git apply "$patchFile" || echo "Patch applied with warnings"
            fi
          fi

      # 安装 Rust 工具链
      - name: Install Rust Toolchain
        uses: dtolnay/rust-toolchain@v1
        with:
          toolchain: ${{ env.SCITER_RUST_VERSION }}
          targets: x86_64-pc-windows-msvc
          components: "rustfmt"
          cache: true

      # 缓存 Rust 依赖
      - name: Cache Rust Dependencies
        uses: Swatinem/rust-cache@v2
        with:
          prefix-key: windows-2022
          cache-on-failure: true

      # 配置 vcpkg
      - name: Setup vcpkg
        uses: lukka/run-vcpkg@v11
        with:
          vcpkgDirectory: C:\vcpkg
          vcpkgGitCommitId: ${{ env.VCPKG_COMMIT_ID }}
          doNotCache: false

      # 安装 vcpkg 依赖
      - name: Install vcpkg Dependencies
        env:
          VCPKG_DEFAULT_HOST_TRIPLET: x64-windows-static
        run: |
          if ! $VCPKG_ROOT/vcpkg install --triplet x64-windows-static; then
            find "${VCPKG_ROOT}/" -name "*.log" | head -3 | while read log; do
              echo "=== $log ===" && cat "$log" | head -50 && echo "=== End ==="
            done
            exit 1
          fi
        shell: bash

      # 编译 RustDesk 主程序
      - name: Build RustDesk
        run: |
          python3 .\build.py --portable --hwcodec --flutter --vram --skip-portable-pack
          mv ./flutter/build/windows/x64/runner/Release ./rustdesk

          # 下载 USB 驱动
          $usbUrl = "https://ghproxy.com/https://github.com/rustdesk-org/rdev/releases/download/usbmmidd_v2/usbmmidd_v2.zip"
          Invoke-WebRequest -Uri $usbUrl -OutFile usbmmidd_v2.zip -RetryCount 3
          Expand-Archive usbmmidd_v2.zip -DestinationPath . -Force
          Remove-Item -Path usbmmidd_v2\Win32 -Recurse -ErrorAction SilentlyContinue
          mv -Force .\usbmmidd_v2 ./rustdesk

          # 下载打印机驱动（失败忽略）
          try {
            $driverUrl = "https://ghproxy.com/https://github.com/rustdesk/hbb_common/releases/download/driver/rustdesk_printer_driver_v4-1.4.zip"
            $adapterUrl = "https://ghproxy.com/https://github.com/rustdesk/hbb_common/releases/download/driver/printer_driver_adapter.zip"
            Invoke-WebRequest -Uri $driverUrl -OutFile rustdesk_printer_driver_v4-1.4.zip -RetryCount 2
            Invoke-WebRequest -Uri $adapterUrl -OutFile printer_driver_adapter.zip -RetryCount 2
            Expand-Archive rustdesk_printer_driver_v4-1.4.zip -DestinationPath . -Force
            mkdir ./rustdesk/drivers -Force
            mv -Force .\rustdesk_printer_driver_v4-1.4 ./rustdesk/drivers/RustDeskPrinterDriver
            Expand-Archive printer_driver_adapter.zip -DestinationPath . -Force
            mv -Force .\printer_driver_adapter.dll ./rustdesk
          } catch { Write-Warning "Printer driver download failed: $_" }
        shell: pwsh

      # 下载顶层窗口组件产物
      - name: Download TopMostWindow Artifacts
        uses: actions/download-artifact@v4
        if: ${{ env.UPLOAD_ARTIFACT == 'true' }}
        with:
          name: topmostwindow-artifacts
          path: ./rustdesk
          overwrite: true

      # 上传未签名产物
      - name: Upload Unsigned Artifacts
        if: ${{ env.UPLOAD_ARTIFACT == 'true' }}
        uses: actions/upload-artifact@v4
        with:
          name: rustdesk-unsigned-windows-x64
          path: rustdesk
          retention-days: 3

      # 签名文件（可选）
      - name: Sign Executables
        if: ${{ env.UPLOAD_ARTIFACT == 'true' && env.SIGN_BASE_URL != '' }}
        shell: bash
        run: |
          pip3 install requests argparse --upgrade
          BASE_URL=${{ secrets.SIGN_BASE_URL }} SECRET_KEY=${{ secrets.SIGN_SECRET_KEY }} python3 res/job.py sign_files ./rustdesk/

      # 构建自解压绿色包
      - name: Build Portable Executable
        if: ${{ env.UPLOAD_ARTIFACT == 'true' }}
        shell: bash
        run: |
          sed -i '/dpiAware/d' res/manifest.xml
          cd ./libs/portable && pip3 install -r requirements.txt --upgrade
          python3 ./generate.py -f ../../rustdesk/ -o . -e ../../rustdesk/rustdesk.exe
          cd ../../ && mkdir -p ./SignOutput
          mv ./target/release/rustdesk-portable-packer.exe ./SignOutput/rustdesk-${{ env.VERSION }}-x64.exe

      # 构建 MSI 安装包
      - name: Build MSI Installer
        if: ${{ env.UPLOAD_ARTIFACT == 'true' }}
        run: |
          cd ./res/msi && python preprocess.py --arp -d ../../rustdesk
          nuget restore msi.sln
          msbuild msi.sln -p:Configuration=Release -p:Platform=x64 /p:TargetVersion=Windows10
          mv ./Package/bin/x64/Release/en-us/Package.msi ../../SignOutput/rustdesk-${{ env.VERSION }}-x64.msi
        shell: bash

      # 签名最终产物（可选）
      - name: Sign Final Files
        if: ${{ env.UPLOAD_ARTIFACT == 'true' && env.SIGN_BASE_URL != '' }}
        shell: bash
        run: |
          BASE_URL=${{ secrets.SIGN_BASE_URL }} SECRET_KEY=${{ secrets.SIGN_SECRET_KEY }} python3 res/job.py sign_files ./SignOutput

      # 发布到 GitHub Release
      - name: Publish to GitHub Release
        if: ${{ env.UPLOAD_ARTIFACT == 'true' }}
        uses: softprops/action-gh-release@v2
        with:
          prerelease: true
          tag_name: ${{ env.TAG_NAME }}
          files: ./SignOutput/rustdesk-*.exe ./SignOutput/rustdesk-*.msi
          fail_on_unmatched_files: false
