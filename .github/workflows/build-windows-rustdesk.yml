name: Build Windows Version of RustDesk (GitHub Compile)

# 支持两种触发方式：1.手动触发 2.被其他工作流调用
on:
  workflow_dispatch:
    inputs:
      upload-artifact:
        type: boolean
        description: "Whether to upload build artifacts (default: true)"
        required: false
        default: true
      upload-tag:
        type: string
        description: "Tag for GitHub Release (e.g. nightly, v1.4.2, default: nightly)"
        required: false
        default: "nightly"
  workflow_call:
    inputs:
      upload-artifact:
        type: boolean
        default: true
      upload-tag:
        type: string
        default: "nightly"

# GitHub 编译所需环境变量（仅保留 Windows 必需项）
env:
  SCITER_RUST_VERSION: "1.75.0"    # RustDesk 兼容的 Rust 版本
  LLVM_VERSION: "15.0.6"           # 编译依赖的 LLVM 版本
  FLUTTER_VERSION: "3.24.5"        # 固定 Flutter 版本，避免兼容性问题
  VCPKG_COMMIT_ID: "120deac3062162151622ca4860575a33844ba10b"  # 依赖管理版本
  VERSION: "1.4.2"                 # 软件版本号
  # 适配手动/调用触发：优先读取手动输入参数
  TAG_NAME: "${{ github.event.inputs.upload-tag || inputs.upload-tag }}"
  UPLOAD_ARTIFACT: "${{ github.event.inputs.upload-artifact || inputs.upload-artifact }}"
  # 仓库密钥（需在 GitHub 仓库 -> Settings -> Secrets 中配置）
  SIGN_BASE_URL: "${{ secrets.SIGN_BASE_URL }}"
  APP_NAME: "${{ secrets.APP_NAME }}"
  RENDEZVOUS_SERVER: "${{ secrets.RENDEZVOUS_SERVER }}"
  RELAY_SERVER: "${{ secrets.RELAY_SERVER }}"
  API_SERVER: "${{ secrets.API_SERVER }}"
  RS_PUB_KEY: "${{ secrets.RS_PUB_KEY }}"
  DEFAULT_PASSWORD: "${{ secrets.DEFAULT_PASSWORD }}"

jobs:
  # 前置任务1：生成 Rust-Flutter 桥接代码（依赖 bridge.yml）
  generate-bridge:
    uses: ./.github/workflows/bridge.yml

  # 前置任务2：编译顶层窗口组件（依赖 third-party-RustDeskTempTopMostWindow.yml）
  build-topmost-window:
    uses: ./.github/workflows/third-party-RustDeskTempTopMostWindow.yml
    with:
      upload-artifact: ${{ github.event.inputs.upload-artifact || inputs.upload-artifact }}
      target: windows-2022
      configuration: Release
      platform: x64
      target_version: Windows10

  # 核心任务：Windows Flutter 版本编译（x64 架构）
  build-windows-flutter:
    name: Windows x64 (Flutter)
    needs: [generate-bridge, build-topmost-window]  # 依赖前置任务完成
    runs-on: windows-2022  # GitHub 托管的 Windows  runner
    steps:
      # 步骤1：清理磁盘空间（GitHub runner 默认空间有限，避免编译中途不足）
      - name: Free Disk Space
        run: |
          Remove-Item -Path "C:\Program Files\Docker" -Recurse -Force -ErrorAction SilentlyContinue
          Remove-Item -Path "C:\ProgramData\Package Cache" -Recurse -Force -ErrorAction SilentlyContinue
          Remove-Item -Path "C:\Windows\Temp\*" -Recurse -Force -ErrorAction SilentlyContinue

      # 步骤2：拉取代码（含子模块）
      - name: Checkout Source Code
        uses: actions/checkout@v4
        with:
          submodules: recursive  # 必须拉取子模块（如 hbb_common、flutter_rust_bridge）
          fetch-depth: 0         # 拉取完整历史，避免子模块引用失败

      # 步骤3：恢复桥接文件（从 generate-bridge 任务的 artifacts 下载）
      - name: Restore Bridge Files
        uses: actions/download-artifact@v4
        with:
          name: bridge-artifact
          path: ./
          overwrite: true  # 覆盖旧文件，避免缓存冲突

      # 步骤4：安装 LLVM（编译 Rust 依赖必需）
      - name: Install LLVM & Clang
        uses: KyleMayes/install-llvm-action@v1
        with:
          version: ${{ env.LLVM_VERSION }}
          cache: true  # 启用 GitHub 缓存，加速后续编译

      # 步骤5：安装 Flutter（含缓存）
      - name: Install Flutter
        uses: subosito/flutter-action@v2.14.0
        with:
          channel: "stable"
          flutter-version: ${{ env.FLUTTER_VERSION }}
          cache: true  # 缓存 Flutter 依赖，减少重复下载

      # 步骤6：替换为 RustDesk 自定义 Flutter 引擎（解决渲染问题）
      - name: Replace Flutter Engine with RustDesk Custom Version
        run: |
          flutter doctor -v  # 验证 Flutter 环境
          flutter precache --windows  # 预下载 Windows 平台依赖
          # 使用 GitHub 镜像加速下载（避免访问超时）
          $engineUrl = "https://ghproxy.com/https://github.com/rustdesk/engine/releases/download/main/windows-x64-release.zip"
          Invoke-WebRequest -Uri $engineUrl -OutFile windows-x64-release.zip -RetryCount 3 -RetryIntervalSec 5
          Expand-Archive -Path windows-x64-release.zip -DestinationPath windows-x64-release -Force
          # 确保 Flutter 引擎目录存在
          $engineDir = "C:/hostedtoolcache/windows/flutter/stable-${{ env.FLUTTER_VERSION }}-x64/bin/cache/artifacts/engine/windows-x64-release/"
          if (-not (Test-Path $engineDir)) { New-Item -ItemType Directory -Path $engineDir | Out-Null }
          # 替换引擎文件
          mv -Force windows-x64-release/* $engineDir
        shell: pwsh  # GitHub Windows runner 推荐用 PowerShell 处理路径

      # 步骤7：应用 Flutter 补丁（修复 DropdownMenu 过滤功能）
      - name: Patch Flutter (DropdownMenu Fix)
        shell: bash
        run: |
          if [[ "${{ env.FLUTTER_VERSION }}" == "3.24.5" ]]; then
            patchFile=".github/patches/flutter_3.24.4_dropdown_menu_enableFilter.diff"
            if [ -f "$patchFile" ]; then
              flutterRoot=$(dirname $(dirname $(which flutter)))
              cp "$patchFile" "$flutterRoot/"
              cd "$flutterRoot" && git apply "$patchFile" || echo "Patch applied with warnings"
            fi
          fi

      # 步骤8：安装 Rust 工具链
      - name: Install Rust Toolchain
        uses: dtolnay/rust-toolchain@v1
        with:
          toolchain: ${{ env.SCITER_RUST_VERSION }}
          targets: x86_64-pc-windows-msvc  # 仅安装 Windows x64 目标
          components: "rustfmt"
          cache: true  # 缓存 Rust 依赖

      # 步骤9：缓存 Rust 依赖（加速后续编译）
      - name: Cache Rust Dependencies
        uses: Swatinem/rust-cache@v2
        with:
          prefix-key: windows-2022
          cache-on-failure: true  # 失败也保留缓存，减少重试时间

      # 步骤10：配置 vcpkg（管理 C++ 依赖，如 FFmpeg）
      - name: Setup vcpkg
        uses: lukka/run-vcpkg@v11
        with:
          vcpkgDirectory: C:\vcpkg
          vcpkgGitCommitId: ${{ env.VCPKG_COMMIT_ID }}
          doNotCache: false

      # 步骤11：安装 vcpkg 依赖（FFmpeg、Opus 等）
      - name: Install vcpkg Dependencies
        env:
          VCPKG_DEFAULT_HOST_TRIPLET: x64-windows-static
        run: |
          if ! $VCPKG_ROOT/vcpkg install --triplet x64-windows-static; then
            # 打印日志帮助排查依赖安装失败
            find "${VCPKG_ROOT}/" -name "*.log" | head -3 | while read log; do
              echo "=== $log ===" && cat "$log" | head -50 && echo "=== End ==="
            done
            exit 1
          fi
        shell: bash

      # 步骤12：编译 RustDesk 主程序
      - name: Build RustDesk (Flutter Version)
        run: |
          # 编译主程序（--flutter 启用 Flutter 界面，--hwcodec 启用硬件解码）
          python3 .\build.py --portable --hwcodec --flutter --vram --skip-portable-pack
          mv ./flutter/build/windows/x64/runner/Release ./rustdesk  # 整理编译产物

          # 下载 USB 虚拟显示器驱动（远程控制必备）
          $usbUrl = "https://ghproxy.com/https://github.com/rustdesk-org/rdev/releases/download/usbmmidd_v2/usbmmidd_v2.zip"
          Invoke-WebRequest -Uri $usbUrl -OutFile usbmmidd_v2.zip -RetryCount 3
          Expand-Archive usbmmidd_v2.zip -DestinationPath . -Force
          Remove-Item -Path usbmmidd_v2\Win32 -Recurse -ErrorAction SilentlyContinue
          mv -Force .\usbmmidd_v2 ./rustdesk

          # 下载打印机驱动（非必需，失败不中断）
          try {
            $driverUrl = "https://ghproxy.com/https://github.com/rustdesk/hbb_common/releases/download/driver/rustdesk_printer_driver_v4-1.4.zip"
            $adapterUrl = "https://ghproxy.com/https://github.com/rustdesk/hbb_common/releases/download/driver/printer_driver_adapter.zip"
            Invoke-WebRequest -Uri $driverUrl -OutFile rustdesk_printer_driver_v4-1.4.zip -RetryCount 2
            Invoke-WebRequest -Uri $adapterUrl -OutFile printer_driver_adapter.zip -RetryCount 2
            Expand-Archive rustdesk_printer_driver_v4-1.4.zip -DestinationPath . -Force
            mkdir ./rustdesk/drivers -Force
            mv -Force .\rustdesk_printer_driver_v4-1.4 ./rustdesk/drivers/RustDeskPrinterDriver
            Expand-Archive printer_driver_adapter.zip -DestinationPath . -Force
            mv -Force .\printer_driver_adapter.dll ./rustdesk
          } catch { Write-Warning "Printer driver download failed: $_" }
        shell: pwsh

      # 步骤13：下载顶层窗口组件产物
      - name: Download TopMostWindow Artifacts
        uses: actions/download-artifact@v4
        if: ${{ env.UPLOAD_ARTIFACT == 'true' }}
        with:
          name: topmostwindow-artifacts
          path: ./rustdesk
          overwrite: true

      # 步骤14：上传未签名产物（临时存储，用于调试）
      - name: Upload Unsigned Artifacts
        if: ${{ env.UPLOAD_ARTIFACT == 'true' }}
        uses: actions/upload-artifact@v4
        with:
          name: rustdesk-unsigned-windows-x64
          path: rustdesk
          retention-days: 3  # 保留3天

      # 步骤15：签名可执行文件（可选，需配置 SIGN_BASE_URL 密钥）
      - name: Sign Executable Files
        if: ${{ env.UPLOAD_ARTIFACT == 'true' && env.SIGN_BASE_URL != '' }}
        shell: bash
        run: |
          pip3 install requests argparse --upgrade
          BASE_URL=${{ secrets.SIGN_BASE_URL }} SECRET_KEY=${{ secrets.SIGN_SECRET_KEY }} python3 res/job.py sign_files ./rustdesk/

      # 步骤16：构建自解压绿色包
      - name: Build Portable Self-Extracted Executable
        if: ${{ env.UPLOAD_ARTIFACT == 'true' }}
        shell: bash
        run: |
          sed -i '/dpiAware/d' res/manifest.xml
          cd ./libs/portable && pip3 install -r requirements.txt --upgrade
          python3 ./generate.py -f ../../rustdesk/ -o . -e ../../rustdesk/rustdesk.exe
          cd ../../ && mkdir -p ./SignOutput
          mv ./target/release/rustdesk-portable-packer.exe ./SignOutput/rustdesk-${{ env.VERSION }}-x64.exe

      # 步骤17：构建 MSI 安装包
      - name: Build MSI Installer
        if: ${{ env.UPLOAD_ARTIFACT == 'true' }}
        run: |
          cd ./res/msi && python preprocess.py --arp -d ../../rustdesk
          nuget restore msi.sln
          msbuild msi.sln -p:Configuration=Release -p:Platform=x64 /p:TargetVersion=Windows10
          mv ./Package/bin/x64/Release/en-us/Package.msi ../../SignOutput/rustdesk-${{ env.VERSION }}-x64.msi
        shell: bash

      # 步骤18：签名 MSI/EXE 产物（可选）
      - name: Sign Final Output Files
        if: ${{ env.UPLOAD_ARTIFACT == 'true' && env.SIGN_BASE_URL != '' }}
        shell: bash
        run: |
          BASE_URL=${{ secrets.SIGN_BASE_URL }} SECRET_KEY=${{ secrets.SIGN_SECRET_KEY }} python3 res/job.py sign_files ./SignOutput

      # 步骤19：发布到 GitHub Release
      - name: Publish to GitHub Release
        if: ${{ env.UPLOAD_ARTIFACT == 'true' }}
        uses: softprops/action-gh-release@v2
        with:
          prerelease: true
          tag_name: ${{ env.TAG_NAME }}
          files: ./SignOutput/rustdesk-*.exe ./SignOutput/rustdesk-*.msi
          fail_on_unmatched_files: false  # 允许部分产物缺失
